#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

### Configure directories

BUILD_DIR="${1:-}"
CACHE_DIR="${2:-}"
ENV_DIR="${3:-}"

BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies

source "$BP_DIR"/lib/output.sh
source "$BP_DIR"/lib/environment.sh
source "$BP_DIR"/lib/dependencies.sh

### Runtime environment

header "Runtime environment"

export_env_dir "$ENV_DIR" | indent

### Check initial state

[ -f "$BUILD_DIR/yarn.lock" ] && YARN=true || YARN=false

### Set up development

header "Set up development"

_NPM_CONFIG_PRODUCTION_="${NPM_CONFIG_PRODUCTION:-true}"
_NODE_ENV_="${NODE_ENV:-production}"

info "previous config:"
info "NPM_CONFIG_PRODUCTION = ${_NPM_CONFIG_PRODUCTION_}"
info "NODE_ENV = ${_NODE_ENV_}"

export NPM_CONFIG_PRODUCTION=false
export NODE_ENV='development'

### Restore /node_modules/

restore_dependencies() {
	header "restore dependencies..."

	[ -d "$BUILD_DIR/node_modules" ] && mv "$BUILD_DIR/node_modules" "$BUILD_DIR/.node_modules"

	# check subdirectories (first level) -> save dependencies copy for subprojects
	save_subprojects_dependencies "$BUILD_DIR"

	# install dependencies...
	if $YARN; then
		yarn_node_modules "$BUILD_DIR" | indent
	else
		npm_node_modules "$BUILD_DIR" | indent
	fi

	# check for dependencies in subprojects...
	check_subproject_dependencies "$BUILD_DIR"
}

restore_dependencies

### Build-step

build_step() {
	header "build step..."

	cd "$BUILD_DIR"

	info "set NODE_ENV=Production"
	export NODE_ENV='production'

	# execute build step
	info "npm run build"
	npm run build

	rm -r "$BUILD_DIR/node_modules" 2>/dev/null || true
	[ -d "$BUILD_DIR/.node_modules" ] && mv "$BUILD_DIR/.node_modules" "$BUILD_DIR/node_modules"

	# restore subprojects dependencies to initial state
	restore_subprojects "$BUILD_DIR"
}

build_step

### Restore environmet

info "Restore environment"

export NPM_CONFIG_PRODUCTION=$_NPM_CONFIG_PRODUCTION_
export NODE_ENV=$_NODE_ENV_
